That's a comprehensive list of advanced MongoDB topics! I'll break each topic down with explanations and examples.  

---

# **Advanced MongoDB Concepts**

## **1. Aggregation Framework (Advanced)**  
MongoDB's aggregation framework allows data transformation and computation using a pipeline approach.

### **1.1 `$lookup` (Joins in MongoDB)**
- `$lookup` performs **left outer joins** to fetch data from another collection.
- Syntax:
  ```json
  {
    $lookup: {
      from: "orders",
      localField: "userId",
      foreignField: "_id",
      as: "userOrders"
    }
  }
  ```
- Example: Get all users with their corresponding orders.
  ```js
  db.users.aggregate([
    {
      $lookup: {
        from: "orders",
        localField: "_id",
        foreignField: "userId",
        as: "orders"
      }
    }
  ]);
  ```

### **1.2 `$facet`, `$bucket`, `$unwind`**
- `$facet`: Allows multiple aggregation pipelines in a single query.
  ```js
  db.products.aggregate([
    {
      $facet: {
        priceStats: [{ $group: { _id: null, avgPrice: { $avg: "$price" } } }],
        categoryCount: [{ $group: { _id: "$category", count: { $sum: 1 } } }]
      }
    }
  ]);
  ```
- `$bucket`: Groups documents into a fixed number of buckets.
  ```js
  db.products.aggregate([
    {
      $bucket: {
        groupBy: "$price",
        boundaries: [0, 100, 500, 1000, 5000],
        default: "Others",
        output: { count: { $sum: 1 } }
      }
    }
  ]);
  ```
- `$unwind`: Deconstructs an array into separate documents.
  ```js
  db.orders.aggregate([{ $unwind: "$items" }]);
  ```

### **1.3 Pipeline Optimization**
- Use **only necessary fields** with `$project`.
- **Index supporting** `$match` for filtering early.
- Reduce the use of `$lookup` if possible.

---

## **2. MongoDB Schema Design & Optimization**
### **2.1 Schema Design Patterns**
#### **(a) Bucket Pattern**
- Storing data in buckets to reduce document growth.
  ```js
  {
    _id: "sensor_001",
    readings: [
      { timestamp: "2025-02-25T10:00:00Z", value: 25 },
      { timestamp: "2025-02-25T11:00:00Z", value: 28 }
    ]
  }
  ```

#### **(b) Attribute Pattern**
- Flattening data to avoid excessive joins.
  ```js
  {
    _id: "user_001",
    attributes: {
      name: "John Doe",
      email: "john@example.com",
      role: "admin"
    }
  }
  ```

#### **(c) Outlier Pattern**
- Separating high-variance fields into a separate collection.

### **2.2 Normalization vs. Denormalization**
- **Normalization**: Storing references instead of embedding.
- **Denormalization**: Embedding documents for faster queries.

---

## **3. Performance Optimization**
### **3.1 Advanced Indexing & Performance Tuning**
#### **(a) Indexing Strategies for Large Datasets**
- Create indexes based on query patterns.
- Use **compound indexes** for multi-field queries.

#### **(b) Covered Indexes, Partial Indexes, TTL Indexes**
- **Covered Index**: Index contains all fields in the query.
- **Partial Index**: Indexes only specific documents.
- **TTL Index**: Automatically removes old documents.
  ```js
  db.sessions.createIndex({ "createdAt": 1 }, { expireAfterSeconds: 3600 });
  ```

### **3.2 Query Optimization using `explain()`**
```js
db.orders.find({ userId: "12345" }).explain("executionStats");
```
- Checks index usage, execution time, and efficiency.

---

## **4. Sharding (Horizontal Scaling)**
### **4.1 What is Sharding?**
- Distributing data across multiple servers for scalability.

### **4.2 Configuring a Sharded Cluster**
1. Start Config Server:
   ```sh
   mongod --configsvr --replSet configReplSet --port 27019
   ```
2. Start Shard Servers:
   ```sh
   mongod --shardsvr --port 27018
   ```
3. Connect to Mongos Router:
   ```sh
   mongos --configdb configReplSet/localhost:27019
   ```

### **4.3 Shard Keys & Best Practices**
- Select shard keys with **high cardinality** and **even distribution**.

### **4.4 Balancing & Monitoring Sharded Data**
- Use `sh.status()` to monitor shard distribution.

---

## **5. Replication (High Availability)**
### **5.1 Replica Sets**
- Ensures high availability by maintaining copies of data.

### **5.2 Failover & Elections**
- Automatic selection of a new primary if the current one fails.

### **5.3 Read & Write Concerns**
- **Read concern**: Controls read consistency.
- **Write concern**: Ensures write acknowledgment.

---

## **6. MongoDB Transactions (Advanced)**
### **6.1 Multi-Document Transactions**
```js
const session = db.getMongo().startSession();
session.startTransaction();
try {
  db.accounts.updateOne({ _id: "user_1" }, { $inc: { balance: -100 } });
  db.accounts.updateOne({ _id: "user_2" }, { $inc: { balance: 100 } });
  session.commitTransaction();
} catch (error) {
  session.abortTransaction();
}
session.endSession();
```

### **6.2 Error Handling in Transactions**
- Use `try/catch` to handle transaction failures.

---

## **7. MongoDB Security (Advanced)**
### **7.1 Enabling Authentication**
```sh
mongod --auth
```

### **7.2 TLS/SSL Encryption**
```sh
mongod --sslMode requireSSL --sslPEMKeyFile /path/to/cert.pem
```

### **7.3 Auditing & Logging**
- Use MongoDB Atlas **audit logs** for monitoring.

---

## **8. Backup & Restore Strategies**
### **8.1 `mongodump` & `mongorestore`**
```sh
mongodump --db mydatabase --out /backup/
mongorestore --db mydatabase /backup/mydatabase
```

### **8.2 Oplog-Based Backup**
- Backup using MongoDB's **oplog** for point-in-time recovery.

### **8.3 Cloud Backups (MongoDB Atlas)**
- **MongoDB Atlas** provides automated backups.

---

## **9. Working with MongoDB Atlas**
### **9.1 Setting Up MongoDB Atlas**
- Create a cluster at [MongoDB Atlas](https://www.mongodb.com/cloud/atlas).

### **9.2 Managing Clusters & Monitoring**
- Use **Performance Advisor** to analyze slow queries.

### **9.3 Cloud Security & Backups**
- Enable **IP whitelisting** and **encryption at rest**.

---

## **10. MongoDB Integration with Node.js (MERN Stack)**
### **10.1 Connecting MongoDB with Mongoose ORM**
```js
const mongoose = require("mongoose");
mongoose.connect("mongodb://localhost:27017/mydb", { useNewUrlParser: true });
```

### **10.2 Schema & Model Definitions**
```js
const userSchema = new mongoose.Schema({ name: String, email: String });
const User = mongoose.model("User", userSchema);
```

### **10.3 Advanced Querying & Aggregation in Mongoose**
```js
User.aggregate([{ $match: { name: "John" } }]);
```

---

## **11. Real-Time Applications with MongoDB**
### **11.1 Change Streams (`watch()`)**
```js
db.orders.watch().on("change", (change) => console.log(change));
```

### **11.2 MongoDB with WebSockets**
- Use **WebSockets** to push real-time updates.

### **11.3 Notifications & Event-Driven Architectures**
- Use **Change Streams** with **Redis Pub/Sub** for real-time messaging.

---

